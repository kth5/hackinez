--- common/lib/modules/fglrx/build_mod/firegl_public.c	2015-12-19 02:47:41.000000000 +0800
+++ common/lib/modules/fglrx/build_mod/firegl_public.c.old	2016-05-03 12:36:20.610491619 +0800
@@ -191,18 +191,10 @@
 #include <linux/string.h>
 #include <linux/gfp.h>
 #include <linux/swap.h>
-#if LINUX_VERSION_CODE < KERNEL_VERSION(4,2,0)
-#include "asm/i387.h"
-#else
 #include <asm/fpu/api.h>
-#endif
 #if LINUX_VERSION_CODE >= KERNEL_VERSION(3,4,0)
-#if LINUX_VERSION_CODE < KERNEL_VERSION(4,2,0)
-#include <asm/fpu-internal.h>
-#else
 #include <asm/fpu/internal.h>
 #endif
-#endif
 
 #include "firegl_public.h"
 #include "kcl_osconfig.h"
@@ -285,7 +277,7 @@
 #endif
 
 #ifdef MODULE_LICENSE
-MODULE_LICENSE("Proprietary. (C) 2002 - ATI Technologies, Starnberg, GERMANY");
+MODULE_LICENSE("GPL\0Proprietary. (C) 2002 - ATI Technologies, Starnberg, GERMANY");
 #endif
 #ifdef MODULE_DEVICE_TABLE
 MODULE_DEVICE_TABLE(pci, fglrx_pci_table);
@@ -631,7 +623,7 @@
 
     len = snprintf(buf, request, "%d\n", major);
 #else
-    len = seq_printf(m, "%d\n", major);
+    seq_printf(m, "%d\n", major);
 #endif
 
     KCL_DEBUG1(FN_FIREGL_PROC, "return len=%i\n",len);
@@ -3424,7 +3416,8 @@
 int ATI_API_CALL KCL_MEM_MTRR_AddRegionWc(unsigned long base, unsigned long size)
 {
 #ifdef CONFIG_MTRR
-    return mtrr_add(base, size, MTRR_TYPE_WRCOMB, 1);
+    return arch_phys_wc_add(base, size);
+    // return mtrr_add(base, size, MTRR_TYPE_WRCOMB, 1);
 #else /* !CONFIG_MTRR */
     return -EPERM;
 #endif /* !CONFIG_MTRR */
@@ -3433,7 +3426,9 @@
 int ATI_API_CALL KCL_MEM_MTRR_DeleteRegion(int reg, unsigned long base, unsigned long size)
 {
 #ifdef CONFIG_MTRR
-    return mtrr_del(reg, base, size);
+    arch_phys_wc_del(reg + 1000);
+    return 0;
+    // return mtrr_del(reg, base, size);
 #else /* !CONFIG_MTRR */
     return -EPERM;
 #endif /* !CONFIG_MTRR */
@@ -6450,36 +6445,17 @@
    struct fpu *fpu = &tsk->thread.fpu;
 
    if(static_cpu_has(X86_FEATURE_XSAVE)) {
-#if LINUX_VERSION_CODE < KERNEL_VERSION(4,2,0)
-      fpu_xsave(fpu);
-      if (!(fpu->state->xsave.xsave_hdr.xstate_bv & XSTATE_FP))
-#else
 	  copy_xregs_to_kernel(&fpu->state.xsave);
-      if (!(fpu->state.xsave.header.xfeatures & XSTATE_FP))
-#endif
+      if (!(fpu->state.xsave.header.xfeatures & XFEATURE_MASK_FP))
          return 1;
    } else if (static_cpu_has(X86_FEATURE_FXSR)) {
-#if LINUX_VERSION_CODE < KERNEL_VERSION(4,2,0)
-        fpu_fxsave(fpu);
-#else
         copy_fxregs_to_kernel(fpu);
-#endif
 } else {
 	 asm volatile("fnsave %[fx]; fwait"
-#if LINUX_VERSION_CODE < KERNEL_VERSION(4,2,0)
-                  : [fx] "=m" (fpu->state->fsave));
-#else
                   : [fx] "=m" (fpu->state.fsave));
-#endif
         return 0;
    }
 
-#if LINUX_VERSION_CODE < KERNEL_VERSION(4,2,0)
-   if (unlikely(fpu->state->fxsave.swd & X87_FSW_ES)) {
-        asm volatile("fnclex");
-        return 0;
-   }
-#endif
    return 1;
 }
 #endif
